// scripts/ezScript.js
const { ethers, network } = require("hardhat");
const { expect } = require("chai");

async function main() {
  console.log("üöÄ D√©ploiement et test du syst√®me EZdefi...");

  const [deployer, user1, user2] = await ethers.getSigners();
  console.log("Deployer address:", deployer.address);
  console.log("User1 address:", user1.address);
  console.log("User2 address:", user2.address);

  // 1. D√©ploiement du token USDC mintable
  console.log("\nüìÑ D√©ploiement du token USDC...");
  const initialSupply = ethers.parseUnits("1000000", 6); // 1 million USDC
  const USDC = await ethers.getContractFactory("MintableUSDC");
  const usdc = await USDC.deploy("USD Coin", "USDC", initialSupply);
  await usdc.waitForDeployment();
  const usdcAddress = await usdc.getAddress();
  console.log(`‚úÖ Token USDC d√©ploy√© √† l'adresse: ${usdcAddress}`);
  console.log(`   Supply initial: ${ethers.formatUnits(initialSupply, 6)} USDC`);

  // 2. D√©ploiement du token aToken (Aave-like)
  console.log("\nüìÑ D√©ploiement du token aToken (Aave)...");
  const AToken = await ethers.getContractFactory("aToken");
  const aToken = await AToken.deploy(usdcAddress, "Aave USDC", "aUSDC");
  await aToken.waitForDeployment();
  const aTokenAddress = await aToken.getAddress();
  console.log(`‚úÖ Token aToken d√©ploy√© √† l'adresse: ${aTokenAddress}`);
  
  // 3. D√©ploiement du token cToken (Compound-like)
  console.log("\nüìÑ D√©ploiement du token cToken (Compound)...");
  const CToken = await ethers.getContractFactory("aToken"); // On utilise le m√™me contrat mais avec un nom diff√©rent
  const cToken = await CToken.deploy(usdcAddress, "Compound USDC", "cUSDC");
  await cToken.waitForDeployment();
  const cTokenAddress = await cToken.getAddress();
  console.log(`‚úÖ Token cToken d√©ploy√© √† l'adresse: ${cTokenAddress}`);

  // 4. D√©ploiement du contrat EZdefi
  console.log("\nüìÑ D√©ploiement du contrat EZdefi...");
  const EZdefi = await ethers.getContractFactory("EZdefi");
  const ezdefi = await EZdefi.deploy(
    usdcAddress,
    aTokenAddress,
    cTokenAddress
  );
  await ezdefi.waitForDeployment();
  const ezdefiAddress = await ezdefi.getAddress();
  console.log(`‚úÖ Contrat EZdefi d√©ploy√© √† l'adresse: ${ezdefiAddress}`);

  // 5. Configuration des taux d'int√©r√™t initiaux
  console.log("\n‚öôÔ∏è Configuration des taux d'int√©r√™t...");
  await aToken.setInterestRate(1000); // 10.00% pour aToken
  console.log("‚úÖ aToken taux configur√©: 10.00%");
  await cToken.setInterestRate(800);  // 8.00% pour cToken
  console.log("‚úÖ cToken taux configur√©: 8.00%");

  // 6. Distribution de tokens USDC aux utilisateurs de test
  console.log("\nüí∞ Distribution de tokens USDC aux utilisateurs...");
  const userAmount = ethers.parseUnits("10000", 6); // 10,000 USDC chacun
  await usdc.transfer(user1.address, userAmount);
  await usdc.transfer(user2.address, userAmount);
  console.log(`‚úÖ ${ethers.formatUnits(userAmount, 6)} USDC transf√©r√©s √† user1`);
  console.log(`‚úÖ ${ethers.formatUnits(userAmount, 6)} USDC transf√©r√©s √† user2`);

  // 7. Approbation des d√©penses pour les utilisateurs
  console.log("\nüîê Configuration des approbations...");
  await usdc.connect(user1).approve(ezdefiAddress, userAmount);
  await usdc.connect(user2).approve(ezdefiAddress, userAmount);
  console.log("‚úÖ Approbations configur√©es pour user1 et user2");

  // 8. Autorisations pour USDC de minter (pour simuler les int√©r√™ts)
  await usdc.approve(aTokenAddress, ethers.parseUnits("1000000", 6));
  await usdc.approve(cTokenAddress, ethers.parseUnits("1000000", 6));
  console.log("‚úÖ Autorisations de mint configur√©es pour aToken et cToken");

  // 9. Tests fonctionnels
  console.log("\nüß™ Ex√©cution des tests fonctionnels...");

  // Test 1: V√©rification des propri√©taires et r√©f√©rences
  console.log("\nüîç Test 1: V√©rification des r√©f√©rences...");
  const ezdefiOwner = await ezdefi.owner();
  expect(ezdefiOwner).to.equal(deployer.address);
  console.log("‚úÖ Le d√©ployeur est bien le propri√©taire d'EZdefi");

  // Utilisation correcte pour acc√©der aux variables d'√©tat publiques
  const ezdefiUsdcRef = await ezdefi.usdc();
  const ezdefiATokenRef = await ezdefi.aToken();
  const ezdefiCTokenRef = await ezdefi.cToken();
  
  expect(ezdefiUsdcRef).to.equal(usdcAddress);
  expect(ezdefiATokenRef).to.equal(aTokenAddress);
  expect(ezdefiCTokenRef).to.equal(cTokenAddress);
  console.log("‚úÖ Les r√©f√©rences aux contrats sont correctes");

  // Test 2: D√©termination du meilleur protocole
  console.log("\nüîç Test 2: D√©termination du meilleur protocole...");
  const bestProtocol = await ezdefi.getBestProtocol();
  expect(bestProtocol).to.equal(aTokenAddress);
  console.log(`‚úÖ Le meilleur protocole est bien aToken (taux: 10.00%)`);

  // Test 3: Allocation des fonds
  console.log("\nüîç Test 3: Allocation des fonds...");
  const allocAmount = ethers.parseUnits("1000", 6);
  // Transfert de USDC vers le contrat EZdefi
  await usdc.transfer(ezdefiAddress, allocAmount);
  console.log(`‚òëÔ∏è ${ethers.formatUnits(allocAmount, 6)} USDC transf√©r√©s √† EZdefi`);
  
  // Allocation vers aToken
  const allocTx = await ezdefi.allocateFunds(aTokenAddress, allocAmount);
  await allocTx.wait();
  console.log(`‚òëÔ∏è Allocation des fonds vers aToken effectu√©e`);
  
  // V√©rification
  const currentProtocol = await ezdefi.currentProtocol();
  expect(currentProtocol).to.equal(aTokenAddress);
  console.log("‚úÖ Le protocole courant est bien aToken");
  
  const aTokenBalance = await aToken.balanceOf(ezdefiAddress);
  expect(aTokenBalance).to.be.gt(0);
  console.log(`‚úÖ EZdefi d√©tient maintenant ${ethers.formatUnits(aTokenBalance, 6)} aTokens`);

  // Test 4: D√©p√¥t d'un utilisateur
  console.log("\nüîç Test 4: D√©p√¥t utilisateur...");
  const depositAmount = ethers.parseUnits("500", 6);
  const depositTx = await ezdefi.connect(user1).deposit(depositAmount, user1.address);
  await depositTx.wait();
  console.log(`‚òëÔ∏è User1 a d√©pos√© ${ethers.formatUnits(depositAmount, 6)} USDC`);
  
  const user1Shares = await ezdefi.balanceOf(user1.address);
  console.log(`‚úÖ User1 d√©tient maintenant ${ethers.formatUnits(user1Shares, 18)} parts d'EZdefi`);

  // Test 5: Simulation d'int√©r√™ts
  console.log("\nüîç Test 5: Simulation d'int√©r√™ts...");
  console.log("‚òëÔ∏è Appel de accrueInterest sur aToken pour simuler le passage du temps...");
  await aToken.accrueInterest();
  
  const totalAssets = await ezdefi.totalAssets();
  console.log(`‚úÖ Total des actifs apr√®s int√©r√™ts: ${ethers.formatUnits(totalAssets, 6)} USDC`);

  // Test 6: Changement de taux et r√©√©quilibrage
  console.log("\nüîç Test 6: R√©√©quilibrage...");
  console.log("‚òëÔ∏è Modification des taux d'int√©r√™t...");
  await aToken.setInterestRate(500); // 5.00%
  await cToken.setInterestRate(1200); // 12.00%
  console.log("‚úÖ Nouveaux taux: aToken = 5.00%, cToken = 12.00%");
  
  // On avance le temps pour permettre le r√©√©quilibrage (12h)
  console.log("‚òëÔ∏è Avancement du temps de 12 heures...");
  await network.provider.send("evm_increaseTime", [12 * 60 * 60]);
  await network.provider.send("evm_mine");
  
  // R√©√©quilibrage
  console.log("‚òëÔ∏è Appel de la fonction rebalance...");
  const rebalanceTx = await ezdefi.rebalance();
  await rebalanceTx.wait();
  
  // V√©rification du nouveau protocole
  const newProtocol = await ezdefi.currentProtocol();
  expect(newProtocol).to.equal(cTokenAddress);
  console.log("‚úÖ Le protocole a bien √©t√© chang√© pour cToken");

  // Test 7: Retrait d'un utilisateur
  console.log("\nüîç Test 7: Retrait utilisateur...");
  const usdcBeforeWithdraw = await usdc.balanceOf(user1.address);
  console.log(`‚òëÔ∏è Solde USDC de User1 avant retrait: ${ethers.formatUnits(usdcBeforeWithdraw, 6)}`);
  
  // Retrait de toutes les parts
  console.log(`‚òëÔ∏è User1 retire toutes ses parts (${ethers.formatUnits(user1Shares, 18)})`);
  const withdrawTx = await ezdefi.connect(user1).redeem(user1Shares, user1.address, user1.address);
  await withdrawTx.wait();
  
  const usdcAfterWithdraw = await usdc.balanceOf(user1.address);
  console.log(`‚úÖ Solde USDC de User1 apr√®s retrait: ${ethers.formatUnits(usdcAfterWithdraw, 6)}`);
  const difference = usdcAfterWithdraw - usdcBeforeWithdraw;
  console.log(`‚úÖ User1 a re√ßu ${ethers.formatUnits(difference, 6)} USDC`);

  console.log("\n‚úÖ‚úÖ‚úÖ Tous les tests ont √©t√© compl√©t√©s avec succ√®s! ‚úÖ‚úÖ‚úÖ");
  console.log("\nüìÑ R√©capitulatif des contrats d√©ploy√©s:");
  console.log(`USDC: ${usdcAddress}`);
  console.log(`aToken: ${aTokenAddress}`);
  console.log(`cToken: ${cTokenAddress}`);
  console.log(`EZdefi: ${ezdefiAddress}`);
}

// Ex√©cution du script principal avec gestion des erreurs
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå Erreur lors du d√©ploiement et des tests:");
    console.error(error);
    process.exit(1);
  });