// scripts/cTokenScript.js
const { ethers, network } = require("hardhat");
const { expect } = require("chai");

async function main() {
  console.log("üöÄ D√©ploiement et test du contrat cToken...");

  const [deployer, user1, user2] = await ethers.getSigners();
  console.log("Deployer address:", deployer.address);
  console.log("User1 address:", user1.address);
  console.log("User2 address:", user2.address);

  // 1. D√©ploiement du token USDC mintable (asset sous-jacent)
  console.log("\nüìÑ D√©ploiement du token USDC...");
  const initialSupply = ethers.parseUnits("1000000", 6); // 1 million USDC
  const USDC = await ethers.getContractFactory("MintableUSDC");
  const usdc = await USDC.deploy("USD Coin", "USDC", initialSupply);
  await usdc.waitForDeployment();
  const usdcAddress = await usdc.getAddress();
  console.log(`‚úÖ Token USDC d√©ploy√© √† l'adresse: ${usdcAddress}`);
  console.log(`   Supply initial: ${ethers.formatUnits(initialSupply, 6)} USDC`);

  // 2. D√©ploiement du token cToken (Aave-like)
  console.log("\nüìÑ D√©ploiement du token cToken...");
  const CToken = await ethers.getContractFactory("cToken");
  const cToken = await CToken.deploy(usdcAddress, "Comp USDC", "cUSDC");
  await cToken.waitForDeployment();
  const cTokenAddress = await cToken.getAddress();
  console.log(`‚úÖ Token cToken d√©ploy√© √† l'adresse: ${cTokenAddress}`);

  // Donner les droits de mint au contrat cToken
  await usdc.transferOwnership(cTokenAddress);
  console.log("‚úÖ Droits de mint transf√©r√©s au contrat cToken");
 
  // 3. Configuration initiale
  console.log("\n‚öôÔ∏è Configuration initiale...");
  
  // D√©finir le taux d'int√©r√™t
  await cToken.setInterestRate(1000); // 10.00%
  console.log("‚úÖ Taux d'int√©r√™t configur√©: 10.00%");
  
  // Distribuer des USDC aux utilisateurs
  const userAmount = ethers.parseUnits("10000", 6); // 10,000 USDC chacun
  await usdc.transfer(user1.address, userAmount);
  await usdc.transfer(user2.address, userAmount);
  console.log(`‚úÖ ${ethers.formatUnits(userAmount, 6)} USDC transf√©r√©s √† user1 et user2`);
  
  // Approbations USDC pour les utilisateurs
  await usdc.connect(user1).approve(cTokenAddress, userAmount);
  await usdc.connect(user2).approve(cTokenAddress, userAmount);
  console.log("‚úÖ Approbations USDC configur√©es pour user1 et user2");

  // 4. Tests fonctionnels
  console.log("\nüß™ Ex√©cution des tests fonctionnels pour cToken...");

  // Test 1: V√©rification des param√®tres initiaux
  console.log("\nüîç Test 1: V√©rification des param√®tres initiaux...");
  const interestRate = await cToken.interestRate();
  expect(interestRate).to.equal(1000);
  console.log("‚úÖ Taux d'int√©r√™t correctement configur√©:", interestRate.toString());
  
  const assetAddress = await cToken.asset();
  expect(assetAddress).to.equal(usdcAddress);
  console.log("‚úÖ Asset correctement r√©f√©renc√©:", assetAddress);
  
  const cTokenOwner = await cToken.owner();
  expect(cTokenOwner).to.equal(deployer.address);
  console.log("‚úÖ Propri√©taire correctement configur√©:", cTokenOwner);

  // Test 2: D√©p√¥t d'USDC dans cToken
  console.log("\nüîç Test 2: D√©p√¥t d'USDC...");
  const depositAmount = ethers.parseUnits("1000", 6); // 1,000 USDC
  
  // V√©rifier le solde avant d√©p√¥t
  const user1UsdcBefore = await usdc.balanceOf(user1.address);
  console.log(`‚òëÔ∏è Solde USDC de User1 avant d√©p√¥t: ${ethers.formatUnits(user1UsdcBefore, 6)}`);
  
  // Effectuer le d√©p√¥t
  const depositTx = await cToken.connect(user1).deposit(depositAmount, user1.address);
  await depositTx.wait();
  console.log(`‚òëÔ∏è User1 a d√©pos√© ${ethers.formatUnits(depositAmount, 6)} USDC`);
  
  // V√©rifier les soldes apr√®s d√©p√¥t
  const user1UsdcAfter = await usdc.balanceOf(user1.address);
  console.log(`‚òëÔ∏è Solde USDC de User1 apr√®s d√©p√¥t: ${ethers.formatUnits(user1UsdcAfter, 6)}`);
  expect(user1UsdcAfter).to.equal(user1UsdcBefore - depositAmount);
  
  const cTokenBalance = await cToken.balanceOf(user1.address);
  console.log(`‚úÖ User1 a re√ßu ${ethers.formatUnits(cTokenBalance, 18)} cTokens`);
  expect(cTokenBalance).to.be.gt(0);

  // Test 3: Accumulation d'int√©r√™ts
  console.log("\nüîç Test 3: Accumulation d'int√©r√™ts...");
  
  // V√©rifier les actifs totaux initiaux
  const initialTotalAssets = await cToken.totalAssets();
  console.log(`‚òëÔ∏è Total des actifs initiaux: ${ethers.formatUnits(initialTotalAssets, 6)} USDC`);
  
  // Simuler le passage du temps (30 jours)
  console.log("‚òëÔ∏è Simulation du passage du temps (30 jours)...");
  await network.provider.send("evm_increaseTime", [30 * 24 * 60 * 60]);
  await network.provider.send("evm_mine");
  
  // Accumuler les int√©r√™ts
  await cToken.accrueInterest();
  console.log("‚òëÔ∏è Int√©r√™ts accumul√©s via accrueInterest()");
  
  // V√©rifier les actifs totaux apr√®s accumulation
  const finalTotalAssets = await cToken.totalAssets();
  console.log(`‚òëÔ∏è Total des actifs apr√®s int√©r√™ts: ${ethers.formatUnits(finalTotalAssets, 6)} USDC`);
  expect(finalTotalAssets).to.be.gt(initialTotalAssets);
  
  // Calcul approximatif des int√©r√™ts attendus
  const expectedInterest = initialTotalAssets * BigInt(10) * BigInt(30) / BigInt(36500); // ~10% sur 30 jours
  console.log(`‚úÖ Int√©r√™ts g√©n√©r√©s: ${ethers.formatUnits(finalTotalAssets - initialTotalAssets, 6)} USDC`);
  console.log(`   (Estimation des int√©r√™ts attendus: ~${ethers.formatUnits(expectedInterest, 6)} USDC)`);


  // Test 4: Modification du taux d'int√©r√™t...
  console.log("\nüîç Test 4: Modification du taux d'int√©r√™t...");
  const newRate = BigInt(1500); // 15.00% - convertir en BigInt

  // Changer le taux d'int√©r√™t
  await cToken.connect(deployer).setInterestRate(newRate);
  
  // V√©rifier le nouveau taux
  const updatedRate = await cToken.interestRate();
  expect(updatedRate).to.equal(newRate);
  console.log(`‚úÖ Taux d'int√©r√™t mis √† jour √† ${Number(updatedRate)/100}%`);
  
  // Test 5: Retrait d'USDC
  console.log("\nüîç Test 5: Retrait d'USDC...");
  
  // D√©terminer le montant de tokens cToken √† racheter
  const redeemAmount = cTokenBalance / BigInt(2); // Racheter la moiti√© des tokens
  console.log(`‚òëÔ∏è User1 va racheter ${ethers.formatUnits(redeemAmount, 18)} cTokens`);
  
  // Solde USDC avant rachat
  const usdcBeforeRedeem = await usdc.balanceOf(user1.address);
  
  // Effectuer le rachat
  const redeemTx = await cToken.connect(user1).redeem(redeemAmount, user1.address, user1.address);
  await redeemTx.wait();
  
  // V√©rifier les soldes apr√®s rachat
  const usdcAfterRedeem = await usdc.balanceOf(user1.address);
  const usdcReceived = usdcAfterRedeem - usdcBeforeRedeem;
  console.log(`‚úÖ User1 a re√ßu ${ethers.formatUnits(usdcReceived, 6)} USDC en rachetant ses cTokens`);
  expect(usdcReceived).to.be.gt(0);
  
  const cTokenAfterRedeem = await cToken.balanceOf(user1.address);
  console.log(`‚úÖ Solde cToken de User1 apr√®s rachat: ${ethers.formatUnits(cTokenAfterRedeem, 18)}`);
  expect(cTokenAfterRedeem).to.equal(cTokenBalance - redeemAmount);

  // Test 6: Test d'autorisation - seul le propri√©taire peut modifier le taux
  console.log("\nüîç Test 6: Test d'autorisation...");
  try {
    await cToken.connect(user1).setInterestRate(2000);
    console.log("‚ùå Test √©chou√©: User1 a pu modifier le taux d'int√©r√™t");
  } catch (error) {
    console.log("‚úÖ Test r√©ussi: User1 ne peut pas modifier le taux d'int√©r√™t");
  }

  console.log("\n‚úÖ‚úÖ‚úÖ Tous les tests ont √©t√© compl√©t√©s avec succ√®s! ‚úÖ‚úÖ‚úÖ");
  console.log("\nüìÑ R√©capitulatif des contrats d√©ploy√©s:");
  console.log(`USDC: ${usdcAddress}`);
  console.log(`cToken: ${cTokenAddress}`);
}

// Ex√©cution du script principal avec gestion des erreurs
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå Erreur lors du d√©ploiement et des tests:");
    console.error(error);
    process.exit(1);
  });